# Use postgres/example user/password credentials

name: task-management-system

services:
  cache:
    image: redis:8.2.1-alpine
    restart: always
    container_name: redis-tms
    networks:
      - tms
    #############################################################################################
    # ___SI QUEREMOS QUE SE PUEDA CONECTAR A LA MONITORIZAR REDIS DESDE EL HOST DIRECTAMENTE___
    #    port:
    #      - "6379:6379"
    #############################################################################################
    healthcheck:
      test: redis-cli ping
      interval: 5s
      timeout: 5s
      retries: 5
  
  db:
    image: postgres:17.6
    container_name: psql-tms
    restart: always
    # set shared memory limit when using docker compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    #volumes:
    #  - type: tmpfs
    #    target: /dev/shm
    #    tmpfs:
    #      size: 134217728 # 128*2^20 bytes = 128Mb
    # env_file: .env.sample
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - tms
    volumes:
      - dbv:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    #############################################################################################
    # ___SI QUEREMOS QUE SE PUEDA CONECTAR A LA BASE DE DATOS DESDE EL HOST DIRECTAMENTE___
    #    port:
    #      - "5432:5432"
    #############################################################################################

  django:
    container_name: django-tms
    image: tms-base
    build:
      context: ./django_backend
      dockerfile: Dockerfile
    env_file: .env.sample
    networks:
      - tms
    ports:
      - "8000:8000"
    volumes:
      - ./django_backend:/app
    depends_on:
      db:
        condition: service_healthy
        restart: true
      cache:
        condition: service_healthy
        restart: true
    # Retornará cero si el servicio está corriendo.
    healthcheck:
      test: ["CMD-SHELL", "python manage.py check --deploy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  celery:
    container_name: celery-tms
    image: tms-base
    build:
      context: ./django_backend
      dockerfile: Dockerfile
    command: celery --app=config worker -l INFO
    env_file: .env.sample
    networks:
      - tms
    depends_on:
      db:
        condition: service_healthy
        restart: true
      cache:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD-SHELL", "celery -A config inspect ping -t 5 2>/dev/null | grep -q pong"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  tms: {}

volumes:
  dbv:
  cache:
